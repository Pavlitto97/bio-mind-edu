/**
 * Quick Visual Test for Responsive Interactive Tasks
 * Opens the app in different viewport sizes and takes screenshots
 */

const { chromium } = require('playwright');

async function quickTest() {
  console.log('üöÄ –ó–∞–ø—É—Å–∫ —à–≤–∏–¥–∫–æ–≥–æ –≤—ñ–∑—É–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç—É...\n');
  
  const browser = await chromium.launch({ 
    headless: false,
    slowMo: 1000 // Slow down for demonstration
  });
  
  const devices = [
    { name: 'iPhone SE', width: 375, height: 667 },
    { name: 'Pixel 7', width: 412, height: 915 }
  ];
  
  for (const device of devices) {
    console.log(`\nüì± –¢–µ—Å—Ç—É–≤–∞–Ω–Ω—è ${device.name}...`);
    
    const context = await browser.newContext({
      viewport: { width: device.width, height: device.height },
    });
    
    const page = await context.newPage();
    
    try {
      await page.goto('http://localhost:8080', { timeout: 30000 });
      console.log('  ‚úÖ –°—Ç–æ—Ä—ñ–Ω–∫–∞ –∑–∞–≤–∞–Ω—Ç–∞–∂–µ–Ω–∞');
      
      await page.waitForTimeout(3000);
      
      // Measure viewport
      const viewport = page.viewportSize();
      console.log(`  üìê Viewport: ${viewport.width}√ó${viewport.height}`);
      
      // Check for content overflow
      const contentHeight = await page.evaluate(() => document.body.scrollHeight);
      console.log(`  üìè Content height: ${contentHeight}px`);
      
      if (contentHeight > viewport.height) {
        console.log(`  ‚ö†Ô∏è  Content –º–æ–∂–µ –ø–æ—Ç—Ä–µ–±—É–≤–∞—Ç–∏ –ø—Ä–æ–∫—Ä—É—Ç–∫–∏`);
      } else {
        console.log(`  ‚úÖ Content –≤–º—ñ—â—É—î—Ç—å—Å—è —É viewport`);
      }
      
      // Count visible elements
      const images = await page.locator('img').count();
      const buttons = await page.locator('button').count();
      console.log(`  üñºÔ∏è  –ó–æ–±—Ä–∞–∂–µ–Ω—å: ${images}`);
      console.log(`  üîò –ö–Ω–æ–ø–æ–∫: ${buttons}`);
      
      // Try to navigate to lesson
      console.log('  üîç –ü–æ—à—É–∫ —É—Ä–æ–∫—É...');
      const lessonFound = await page.locator('text=/Cell|–ö–ª—ñ—Ç–∏–Ω–∞/i').first().isVisible({ timeout: 5000 }).catch(() => false);
      
      if (lessonFound) {
        console.log('  ‚úÖ –£—Ä–æ–∫ –∑–Ω–∞–π–¥–µ–Ω–æ');
        await page.locator('text=/Cell|–ö–ª—ñ—Ç–∏–Ω–∞/i').first().click();
        await page.waitForTimeout(2000);
        
        // Look for interactive task
        const taskButton = await page.locator('text=/Interactive|–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω/i').first().isVisible({ timeout: 3000 }).catch(() => false);
        
        if (taskButton) {
          console.log('  ‚úÖ –ö–Ω–æ–ø–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –∑–Ω–∞–π–¥–µ–Ω–∞');
          await page.locator('text=/Interactive|–Ü–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω/i').first().click();
          await page.waitForTimeout(3000);
          
          // Check task elements
          const taskImages = await page.locator('img[src*="assets"]').count();
          const taskButtons = await page.locator('button').count();
          
          console.log(`  üéÆ –ï–ª–µ–º–µ–Ω—Ç—ñ–≤ –≥—Ä–∏: ${taskImages}`);
          console.log(`  üîò –ö–Ω–æ–ø–æ–∫ –∫–µ—Ä—É–≤–∞–Ω–Ω—è: ${taskButtons}`);
          
          // Check if elements are within viewport
          const allImages = await page.locator('img[src*="assets"]').all();
          let visibleCount = 0;
          
          for (const img of allImages) {
            const box = await img.boundingBox();
            if (box && box.y + box.height <= viewport.height) {
              visibleCount++;
            }
          }
          
          console.log(`  üëÅÔ∏è  –í–∏–¥–∏–º–∏—Ö –∑–æ–±—Ä–∞–∂–µ–Ω—å: ${visibleCount}/${taskImages}`);
          
          if (visibleCount === taskImages) {
            console.log(`  ‚úÖ‚úÖ‚úÖ –í–°–Ü –ï–õ–ï–ú–ï–ù–¢–ò –í–ò–î–ò–ú–Ü!`);
          } else {
            console.log(`  ‚ö†Ô∏è  –î–µ—è–∫—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –º–æ–∂—É—Ç—å –±—É—Ç–∏ –∑–∞ –º–µ–∂–∞–º–∏ viewport`);
          }
        } else {
          console.log('  ‚ÑπÔ∏è  –ö–Ω–æ–ø–∫–∞ —ñ–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∑–∞–≤–¥–∞–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞');
        }
      } else {
        console.log('  ‚ÑπÔ∏è  –£—Ä–æ–∫ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –Ω–∞ –≥–æ–ª–æ–≤–Ω—ñ–π —Å—Ç–æ—Ä—ñ–Ω—Ü—ñ');
      }
      
    } catch (error) {
      console.log(`  ‚ùå –ü–æ–º–∏–ª–∫–∞: ${error.message}`);
    }
    
    await context.close();
    await new Promise(resolve => setTimeout(resolve, 2000));
  }
  
  await browser.close();
  
  console.log('\n' + '='.repeat(60));
  console.log('‚úÖ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
  console.log('='.repeat(60));
  console.log('\nüìã –í–∏—Å–Ω–æ–≤–æ–∫:');
  console.log('  –Ø–∫—â–æ –≤—Å—ñ –µ–ª–µ–º–µ–Ω—Ç–∏ –≤–∏–¥–∏–º—ñ - –∞–¥–∞–ø—Ç–∏–≤–Ω—ñ—Å—Ç—å –ø—Ä–∞—Ü—é—î –ø—Ä–∞–≤–∏–ª—å–Ω–æ! ‚ú®');
}

quickTest().catch(console.error);
